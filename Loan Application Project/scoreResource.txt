

ds2_options scond=WARNING;
/* Custom Object CreditCheckAPI retrieved on Wed Aug 30 02:17:22 UTC 2023 */ 
ds2_options sas;
/* PACKAGE_START: packageName="Loanu32Applicationu32Project_CreditCheckAPI_2_0", referencedBy=Loan Application Project, name=CreditCheckAPI, nodeId=e5668507-552b-4863-8c8d-369347c7d172, objectUri=/decisions/codeFiles/5156a734-b100-43be-aecb-fa45ce83b5a7/revisions/7c3cada7-ddac-4c7b-8da1-add0a77676d8 */
package "Loanu32Applicationu32Project_CreditCheckAPI_2_0" / inline;
    dcl package pymas py;
    dcl double pystop;
    dcl package logger logr('App.tk.SID.Python');

    method execute(
         varchar(6) CustomerID
        , in_out double CredLineAge
        , in_out double CredLines
        , in_out double DebtIncRatio
        , in_out double Delinquencies
        , in_out double DerogatoryMarks
        , in_out double Inquiries
    );

      dcl nvarchar(10485760) pypgm;
      dcl double rc;
      dcl double revision;
      if null(py) and pystop ^= 1 then do;
        py = _new_ pymas();
        if inmas() then do;
            rc = py.useModule('"Loanu32Applicationu32Project_CreditCheckAPI_2_0_-953064184"', 1);
        end;
        else do;
            rc = 1;
        end;
        if rc then do;
          rc = py.appendSrcLine('');
          rc = py.appendSrcLine(''''''' List all output parameters as comma-separated values in the "Output:" docString. Do not specify "None" if there is no output parameter. ''''''');
          rc = py.appendSrcLine(''''''' List all Python packages that are not built-in packages in the "DependentPackages:" docString. Separate the package names with commas on a single line. ''''''');
          rc = py.appendSrcLine(''''''' DependentPackages: requests''''''');
          rc = py.appendSrcLine('');
          rc = py.appendSrcLine('import json ');
          rc = py.appendSrcLine('import requests ');
          rc = py.appendSrcLine(' ');
          rc = py.appendSrcLine('def execute (CustomerID):');
          rc = py.appendSrcLine('    ''Output:CredLineAge,CredLines,DebtIncRatio,Delinquencies,DerogatoryMarks,Inquiries'' ');
          rc = py.appendSrcLine('    ');
          rc = py.appendSrcLine('    ## (CustomerID: str) -> tuple');
          rc = py.appendSrcLine('    CredLineAge: int');
          rc = py.appendSrcLine('    CredLines: int');
          rc = py.appendSrcLine('    DebtIncRatio: int');
          rc = py.appendSrcLine('    Delinquencies: int');
          rc = py.appendSrcLine('    DerogatoryMarks: int');
          rc = py.appendSrcLine('    Inquiries: int');
          rc = py.appendSrcLine('    ');
          rc = py.appendSrcLine('    ## Create JSON payload with customer ID');
          rc = py.appendSrcLine('    payload = { "CustomerID": CustomerID} ');
          rc = py.appendSrcLine('    ## Perform call to external credit bureau API');
          rc = py.appendSrcLine('    cred_check = requests.post( ');
          rc = py.appendSrcLine('        url=''http://api.app.svc.cluster.local:5005/check'', ');
          rc = py.appendSrcLine('        headers={''Content-Type'': ''application/json''}, ');
          rc = py.appendSrcLine('        data = json.dumps(payload) ');
          rc = py.appendSrcLine('    ) ');
          rc = py.appendSrcLine('    CredLines = cred_check.json()[''CredLines''] ');
          rc = py.appendSrcLine('    CredLineAge = cred_check.json()[''CredLineAge'']');
          rc = py.appendSrcLine('    DebtIncRatio = cred_check.json()[''DebtIncRatio'']');
          rc = py.appendSrcLine('    Delinquencies = cred_check.json()[''Delinquencies'']');
          rc = py.appendSrcLine('    DerogatoryMarks = cred_check.json()[''DerogatoryMarks'']');
          rc = py.appendSrcLine('    Inquiries = cred_check.json()[''Inquiries'']');
          rc = py.appendSrcLine('#     CredLineAge = 101.4660019');
          rc = py.appendSrcLine('#     CredLines = 8');
          rc = py.appendSrcLine('#     DebtIncRatio = 1.804552228');
          rc = py.appendSrcLine('#     Delinquencies = 0');
          rc = py.appendSrcLine('#     DerogatoryMarks = 0');
          rc = py.appendSrcLine('#     Inquiries = 1');
          rc = py.appendSrcLine('    return CredLineAge,CredLines,DebtIncRatio,Delinquencies,DerogatoryMarks,Inquiries');
          pypgm = py.getSource();
          revision = py.publish(pypgm, '"Loanu32Applicationu32Project_CreditCheckAPI_2_0_-953064184"');
          if revision < 1 then do;
            pystop = 1;
            logr.log( 'e', 'publish revision=$s', revision );
            return;
          end;
        end;
        else do;
          logr.log( 'd', 'useModule rc=$s', rc );
        end;
        rc = py.useMethod('execute');
        if rc then do;
          pystop = 1;
          logr.log( 'e', 'useMethod rc=$s', rc );
          return;
        end;
      end;
      if pystop ^= 1 then do;
        rc = py.setString ('CustomerID', CustomerID);
        if rc then do;
          logr.log( 'e', 'set CustomerID rc=$s', rc );
          return;
        end;
        rc = py.execute();
        if rc then do;
           logr.log( 'd', 'execute rc=$s', rc );
           return;
        end;
        CredLineAge = py.getDouble('CredLineAge');
        CredLines = py.getDouble('CredLines');
        DebtIncRatio = py.getDouble('DebtIncRatio');
        Delinquencies = py.getDouble('Delinquencies');
        DerogatoryMarks = py.getDouble('DerogatoryMarks');
        Inquiries = py.getDouble('Inquiries');
      end;
    end;
/* PACKAGE_END: "Loanu32Applicationu32Project_CreditCheckAPI_2_0" */
endpackage;
ds2_options scond=none;
/* Model Python GradientBoost (Pipeline 1) version 1.0 retrieved on Wed Aug 30 02:17:22 UTC 2023 */ 
/* PACKAGE_START: packageName="Loanu32Applicationu32Project_Pythonu32GradientBoostu32u40Pipelineu321u41", referencedBy=Loan Application Project, name=Python GradientBoost (Pipeline 1), nodeId=8ea60d53-7155-4d23-8976-1ab08a189b31, objectUri=/modelRepository/models/4136b5c6-4c03-46cd-b46c-852c63462643 */
package "Loanu32Applicationu32Project_Pythonu32GradientBoostu32u40Pipelineu321u41" / overwrite=yes;
dcl package pymas pm;
dcl package logger logr('App.MM.Python.DS2');
dcl varchar(32767) character set utf8 pypgm;
dcl int resultCode revision;

method score(double "CredLineAge",
double "CredLines",
double "DebtIncRatio",
double "Delinquencies",
double "DerogatoryMarks",
double "HomeValue",
double "Income",
double "Inquiries",
varchar(100) "JobType",
double "LoanRequest",
double "LoanToValue",
double "YearsOnJob",
in_out double resultCode,
in_out double "P_Default0",
in_out double "P_Default1",
in_out varchar(100) "I_Default");

   resultCode = revision = 0;
   if null(pm) then do;
      pm = _new_ pymas();
      resultCode = pm.useModule('model_exec_177ba876-968d-4d33-ad0a-2ce99b1d4c13', 1);
      if resultCode then do;
         resultCode = pm.appendSrcLine('import sys');
         resultCode = pm.appendSrcLine('sys.path.append("/models/resources/viya/4136b5c6-4c03-46cd-b46c-852c63462643/")');
         resultCode = pm.appendSrcLine('import settings_4136b5c6_4c03_46cd_b46c_852c63462643');
         resultCode = pm.appendSrcLine('settings_4136b5c6_4c03_46cd_b46c_852c63462643.pickle_path = "/models/resources/viya/4136b5c6-4c03-46cd-b46c-852c63462643/"');
         resultCode = pm.appendSrcLine('import _56liklgygp1yokc3m2xxt7y6h_ebe21406_9f5e_414c_a46b_8b835c477a7a');
         resultCode = pm.appendSrcLine('def score_method(Delinquencies, DerogatoryMarks, Inquiries, JobType, CredLineAge, CredLines, DebtIncRatio, LoanRequest, HomeValue, Income, LoanToValue, YearsOnJob):');
         resultCode = pm.appendSrcLine('    "Output: P_Default0, P_Default1, I_Default"');
         resultCode = pm.appendSrcLine('    return _56liklgygp1yokc3m2xxt7y6h_ebe21406_9f5e_414c_a46b_8b835c477a7a.score_method(Delinquencies, DerogatoryMarks, Inquiries, JobType, CredLineAge, CredLines, DebtIncRatio, LoanRequest, HomeValue, Income, LoanToValue, YearsOnJob)');

         revision = pm.publish(pm.getSource(), 'model_exec_177ba876-968d-4d33-ad0a-2ce99b1d4c13');
         if ( revision < 1 ) then do;
            logr.log( 'e', 'py.publish() failed.');
            resultCode = -1;
            return;
         end;
      end;
   end;

   resultCode = pm.useMethod('score_method');
   if resultCode then do;
      logr.log('E', 'useMethod() failed. resultCode=$s', resultCode);
      return;
   end;
   resultCode = pm.setDouble('CredLineAge', CredLineAge);
   if resultCode then
      logr.log('E', 'setDouble for CredLineAge failed.  resultCode=$s', resultCode);
   resultCode = pm.setDouble('CredLines', CredLines);
   if resultCode then
      logr.log('E', 'setDouble for CredLines failed.  resultCode=$s', resultCode);
   resultCode = pm.setDouble('DebtIncRatio', DebtIncRatio);
   if resultCode then
      logr.log('E', 'setDouble for DebtIncRatio failed.  resultCode=$s', resultCode);
   resultCode = pm.setDouble('Delinquencies', Delinquencies);
   if resultCode then
      logr.log('E', 'setDouble for Delinquencies failed.  resultCode=$s', resultCode);
   resultCode = pm.setDouble('DerogatoryMarks', DerogatoryMarks);
   if resultCode then
      logr.log('E', 'setDouble for DerogatoryMarks failed.  resultCode=$s', resultCode);
   resultCode = pm.setDouble('HomeValue', HomeValue);
   if resultCode then
      logr.log('E', 'setDouble for HomeValue failed.  resultCode=$s', resultCode);
   resultCode = pm.setDouble('Income', Income);
   if resultCode then
      logr.log('E', 'setDouble for Income failed.  resultCode=$s', resultCode);
   resultCode = pm.setDouble('Inquiries', Inquiries);
   if resultCode then
      logr.log('E', 'setDouble for Inquiries failed.  resultCode=$s', resultCode);
   resultCode = pm.setString('JobType', JobType);
   if resultCode then
      logr.log('E', 'setString for JobType failed.  resultCode=$s', resultCode);
   resultCode = pm.setDouble('LoanRequest', LoanRequest);
   if resultCode then
      logr.log('E', 'setDouble for LoanRequest failed.  resultCode=$s', resultCode);
   resultCode = pm.setDouble('LoanToValue', LoanToValue);
   if resultCode then
      logr.log('E', 'setDouble for LoanToValue failed.  resultCode=$s', resultCode);
   resultCode = pm.setDouble('YearsOnJob', YearsOnJob);
   if resultCode then
      logr.log('E', 'setDouble for YearsOnJob failed.  resultCode=$s', resultCode);
   resultCode = pm.execute();
   if (resultCode) then
      logr.log('E', 'Error: pm.execute failed.  resultCode=$s', resultCode);
   else do;
      "P_Default0" = pm.getDouble('P_Default0');
      "P_Default1" = pm.getDouble('P_Default1');
      "I_Default" = pm.getString('I_Default');
   end;
end;

/* PACKAGE_END: "Loanu32Applicationu32Project_Pythonu32GradientBoostu32u40Pipelineu321u41" */
endpackage;

ds2_options scond=WARNING;
/* Rule Set highRiskModelScoreRule version 1.0 generated on Wed Aug 30 02:17:22 UTC 2023 */

DS2_OPTIONS LOGICALEXPR = STANDARD;
DS2_OPTIONS SCOND = WARNING;
DS2_OPTIONS MISSING_NOTE;

/* PACKAGE_START: packageName="Loanu32Applicationu32Project_highRiskModelScoreRule_1_0", referencedBy=Loan Application Project, name=highRiskModelScoreRule, nodeId=fdb53d39-2ef8-4669-9eff-8c144c5c0442, objectUri=/businessRules/ruleSets/c294cb09-b87b-4ce0-b7d8-38f038934f86/revisions/e56d05d9-f398-42c6-bfb1-4d1b3eceb1f3 */
  package "Loanu32Applicationu32Project_highRiskModelScoreRule_1_0"  / inline;

      dcl package logger _logger('App.SASDCM');
      dcl package logger logr_variableTrace('App.TableServices.DS2.Runtime.TraceVariables');

        /* ---- RULE FIRED FLAG COUNT = 0 ---- */
            method setruleFiredBasePosition(integer newBasePosition); end;
            method setDecisionNodeID(varchar newDecisonNodeID); end;
            method enableRuleFiredRecording(); end;
            method disableRuleFiredRecording(); end;
            method initRuleFireHashes(); end;
            method getRuleFiredFlagCount() returns integer;  return 0; end;
            method recordRuleFired(
              in_out char    ruleFiredFlags,
              in_out integer rulesFiredForRecordCount,
              char(36)       this_rule_id);
            end;

    method execute( in_out double "P_Default1",in_out varchar "Status");

        "Status" = '''undefined''';

;
         if ("P_Default1" < .10) then do;
         "Status" = 'Approved';

goto "end_2e4243fd-0ce9-4115-9d8d-525bc1a99eac";end;
         else do;
         "Status" = 'Declined';

         end;

         "end_2e4243fd-0ce9-4115-9d8d-525bc1a99eac":

      rule_end:  /* label for rule RETURN action */
    end;

/* PACKAGE_END: "Loanu32Applicationu32Project_highRiskModelScoreRule_1_0" */
  endpackage;
ds2_options scond=WARNING;
/* Rule Set loanToValueRule version 1.0 generated on Wed Aug 30 02:17:22 UTC 2023 */

DS2_OPTIONS LOGICALEXPR = STANDARD;
DS2_OPTIONS SCOND = WARNING;
DS2_OPTIONS MISSING_NOTE;

/* PACKAGE_START: packageName="Loanu32Applicationu32Project_loanToValueRule_1_0", referencedBy=Loan Application Project, name=loanToValueRule, nodeId=a0840837-2bef-4d64-b0cd-2bd8a9f63b85, objectUri=/businessRules/ruleSets/75f8a22e-d288-4f54-aa25-260c560926e3/revisions/92145e26-d99e-4add-97c5-8c14892afb5b */
  package "Loanu32Applicationu32Project_loanToValueRule_1_0"  / inline;

      dcl package logger _logger('App.SASDCM');
      dcl package logger logr_variableTrace('App.TableServices.DS2.Runtime.TraceVariables');

        /* ---- RULE FIRED FLAG COUNT = 0 ---- */
            method setruleFiredBasePosition(integer newBasePosition); end;
            method setDecisionNodeID(varchar newDecisonNodeID); end;
            method enableRuleFiredRecording(); end;
            method disableRuleFiredRecording(); end;
            method initRuleFireHashes(); end;
            method getRuleFiredFlagCount() returns integer;  return 0; end;
            method recordRuleFired(
              in_out char    ruleFiredFlags,
              in_out integer rulesFiredForRecordCount,
              char(36)       this_rule_id);
            end;

    method execute( in_out double "LoanToValue",in_out varchar "Status");

;
         if ("LoanToValue" >= .80) then do;
         "Status" = 'Declined';

         end;

         "end_0548d939-a185-4cdc-bddc-9cff12cd42b3":

      rule_end:  /* label for rule RETURN action */
    end;

/* PACKAGE_END: "Loanu32Applicationu32Project_loanToValueRule_1_0" */
  endpackage;
ds2_options scond=WARNING;
/* Rule Set lowRiskModelScoreRule version 1.0 generated on Wed Aug 30 02:17:22 UTC 2023 */

DS2_OPTIONS LOGICALEXPR = STANDARD;
DS2_OPTIONS SCOND = WARNING;
DS2_OPTIONS MISSING_NOTE;

/* PACKAGE_START: packageName="Loanu32Applicationu32Project_lowRiskModelScoreRule_1_0", referencedBy=Loan Application Project, name=lowRiskModelScoreRule, nodeId=3fc77e36-e2ff-4b06-b6b1-4f144b16246d, objectUri=/businessRules/ruleSets/eafc037b-dbbb-440a-b465-960a71c03f7c/revisions/5b2c2680-c833-4e93-8675-e6dfd9db76f6 */
  package "Loanu32Applicationu32Project_lowRiskModelScoreRule_1_0"  / inline;

      dcl package logger _logger('App.SASDCM');
      dcl package logger logr_variableTrace('App.TableServices.DS2.Runtime.TraceVariables');

        /* ---- RULE FIRED FLAG COUNT = 0 ---- */
            method setruleFiredBasePosition(integer newBasePosition); end;
            method setDecisionNodeID(varchar newDecisonNodeID); end;
            method enableRuleFiredRecording(); end;
            method disableRuleFiredRecording(); end;
            method initRuleFireHashes(); end;
            method getRuleFiredFlagCount() returns integer;  return 0; end;
            method recordRuleFired(
              in_out char    ruleFiredFlags,
              in_out integer rulesFiredForRecordCount,
              char(36)       this_rule_id);
            end;

    method execute( in_out double "P_Default1",in_out varchar "Status");

        "Status" = '''undefined''';

;
         if ("P_Default1" < 0.3) then do;
         "Status" = 'Approved';

goto "end_5d4a4e9f-6ca4-4747-848e-be2624cd2df6";end;
         else do;
         "Status" = 'Declined';

         end;

         "end_5d4a4e9f-6ca4-4747-848e-be2624cd2df6":

      rule_end:  /* label for rule RETURN action */
    end;

/* PACKAGE_END: "Loanu32Applicationu32Project_lowRiskModelScoreRule_1_0" */
  endpackage;

  DS2_OPTIONS LOGICALEXPR = STANDARD;
  DS2_OPTIONS SCOND = WARNING;
  DS2_OPTIONS MISSING_NOTE;

/* Decision Loan Application Project version 2.0 generated on Wed Aug 30 02:17:22 UTC 2023 */
/* {PACKAGE_START} */
  package "Loan Application Project"  / inline;
    dcl package logger logr_perf('App.tk.SID.Perf');
    dcl double timer_start;
    dcl double elapsed_time;
    dcl double total_timer_start;
    dcl double total_elapsed_time;

    dcl package "Loanu32Applicationu32Project_CreditCheckAPI_2_0" "Loanu32Applicationu32Project_CreditCheckAPI_2_0_hdl"();
    dcl package "Loanu32Applicationu32Project_Pythonu32GradientBoostu32u40Pipelineu321u41" "Loanu32Applicationu32Project_Pythonu32GradientBoostu32u40Pipelineu321u41_hdl"();
    dcl package "Loanu32Applicationu32Project_highRiskModelScoreRule_1_0" "Loanu32Applicationu32Project_highRiskModelScoreRule_1_0_hdl"();
    dcl package "Loanu32Applicationu32Project_loanToValueRule_1_0" "Loanu32Applicationu32Project_loanToValueRule_1_0_hdl"();
    dcl package "Loanu32Applicationu32Project_lowRiskModelScoreRule_1_0" "Loanu32Applicationu32Project_lowRiskModelScoreRule_1_0_hdl"();

     method init();

     end;

    method execute_internal(
       in_out double "CredLineAge"
      ,in_out double "CredLines"
      ,in_out varchar "CustomerID"
      ,in_out double "DebtIncRatio"
      ,in_out double "Delinquencies"
      ,in_out double "DerogatoryMarks"
      ,in_out double "HomeValue"
      ,in_out double "Income"
      ,in_out double "Inquiries"
      ,in_out varchar "JobType"
      ,in_out double "LoanRequest"
      ,in_out double "LoanToValue"
      ,in_out double "YearsOnJob"
      ,in_out varchar "I_Default"
      ,in_out double "P_Default0"
      ,in_out double "P_Default1"
      ,in_out varchar "Status"

      ,in_out integer "_filter_"

    );
        dcl integer dg_filter_;

       dcl integer _masRC;

        total_timer_start = datetime();

"I_Default" = 'undefined';
"Status" = 'undefined';

        timer_start = datetime();
        "Loanu32Applicationu32Project_loanToValueRule_1_0_hdl".execute("LoanToValue", "Status");
        elapsed_time = datetime() - timer_start;
        logr_perf.log( 'd', 'Package Name: "Loan Application Project", Node Name: loanToValueRule, Node ID: a0840837-2bef-4d64-b0cd-2bd8a9f63b85, NODE DURATION: ' .. elapsed_time);

        if ( Status= 'Declined' ) then do;

        end;
        else do;

             timer_start = datetime();
             "Loanu32Applicationu32Project_CreditCheckAPI_2_0_hdl".execute("CustomerID", "CredLineAge", "CredLines", "DebtIncRatio", "Delinquencies", "DerogatoryMarks", "Inquiries");
             elapsed_time = datetime() - timer_start;
             logr_perf.log( 'd', 'Package Name: "Loan Application Project", Node Name: CreditCheckAPI, Node ID: e5668507-552b-4863-8c8d-369347c7d172, NODE DURATION: ' .. elapsed_time);

             timer_start = datetime();
             "Loanu32Applicationu32Project_Pythonu32GradientBoostu32u40Pipelineu321u41_hdl".score("CredLineAge", "CredLines", "DebtIncRatio", "Delinquencies", "DerogatoryMarks", "HomeValue", "Income", "Inquiries", "JobType", "LoanRequest", "LoanToValue", "YearsOnJob", "resultCode", "P_Default0", "P_Default1", "I_Default");
             elapsed_time = datetime() - timer_start;
             logr_perf.log( 'd', 'Package Name: "Loan Application Project", Node Name: Python GradientBoost (Pipeline 1), Node ID: 8ea60d53-7155-4d23-8976-1ab08a189b31, NODE DURATION: ' .. elapsed_time);

/*model code*/;

             if ( YearsOnJob< 1 ) then do;

                  timer_start = datetime();
                  "Loanu32Applicationu32Project_highRiskModelScoreRule_1_0_hdl".execute("P_Default1", "Status");
                  elapsed_time = datetime() - timer_start;
                  logr_perf.log( 'd', 'Package Name: "Loan Application Project", Node Name: highRiskModelScoreRule, Node ID: fdb53d39-2ef8-4669-9eff-8c144c5c0442, NODE DURATION: ' .. elapsed_time);

             end;
             else do;

                  timer_start = datetime();
                  "Loanu32Applicationu32Project_lowRiskModelScoreRule_1_0_hdl".execute("P_Default1", "Status");
                  elapsed_time = datetime() - timer_start;
                  logr_perf.log( 'd', 'Package Name: "Loan Application Project", Node Name: lowRiskModelScoreRule, Node ID: 3fc77e36-e2ff-4b06-b6b1-4f144b16246d, NODE DURATION: ' .. elapsed_time);

             end;

        end;

        "end":/*label for decision node link to flow end*/

        total_elapsed_time = datetime() - total_timer_start;
        logr_perf.log( 'd', 'Package Name: "Loan Application Project", TOTAL DURATION: ' .. total_elapsed_time);

     end;

    method execute(
       double "CredLineAge_"
      ,double "CredLines_"
      ,varchar(6) "CustomerID_"
      ,double "DebtIncRatio_"
      ,double "Delinquencies_"
      ,double "DerogatoryMarks_"
      ,double "HomeValue_"
      ,double "Income_"
      ,double "Inquiries_"
      ,varchar(7) "JobType_"
      ,double "LoanRequest_"
      ,double "LoanToValue_"
      ,double "YearsOnJob_"
      ,in_out double "CredLineAge"
      ,in_out double "CredLines"
      ,in_out varchar "CustomerID"
      ,in_out double "DebtIncRatio"
      ,in_out double "Delinquencies"
      ,in_out double "DerogatoryMarks"
      ,in_out double "HomeValue"
      ,in_out varchar "I_Default"
      ,in_out double "Income"
      ,in_out double "Inquiries"
      ,in_out varchar "JobType"
      ,in_out double "LoanRequest"
      ,in_out double "LoanToValue"
      ,in_out double "P_Default0"
      ,in_out double "P_Default1"
      ,in_out varchar "Status"
      ,in_out double "YearsOnJob"
);

      dcl integer _filter_;

          "CredLineAge" = "CredLineAge_";
      "CredLines" = "CredLines_";
      "CustomerID" = "CustomerID_";
      "DebtIncRatio" = "DebtIncRatio_";
      "Delinquencies" = "Delinquencies_";
      "DerogatoryMarks" = "DerogatoryMarks_";
      "HomeValue" = "HomeValue_";
      "Income" = "Income_";
      "Inquiries" = "Inquiries_";
      "JobType" = "JobType_";
      "LoanRequest" = "LoanRequest_";
      "LoanToValue" = "LoanToValue_";
      "YearsOnJob" = "YearsOnJob_";

          execute_internal(
          "CredLineAge"
         ,"CredLines"
         ,"CustomerID"
         ,"DebtIncRatio"
         ,"Delinquencies"
         ,"DerogatoryMarks"
         ,"HomeValue"
         ,"Income"
         ,"Inquiries"
         ,"JobType"
         ,"LoanRequest"
         ,"LoanToValue"
         ,"YearsOnJob"
         ,"I_Default"
         ,"P_Default0"
         ,"P_Default1"
         ,"Status"
      ,"_filter_"
      );

    end;

    /* {PACKAGE_END} */
      endpackage;
